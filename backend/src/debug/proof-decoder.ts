import { ethers } from 'ethers';

// Define the struct types as per the Solidity interface
interface RequestBody {
  url: string;
  httpMethod: string;
  headers: string;
  queryParams: string;
  body: string;
  postProcessJq: string;
  abiSignature: string;
}

interface ResponseBody {
  abiEncodedData: string;
}

interface Response {
  attestationType: string;
  sourceId: string;
  votingRound: bigint;
  lowestUsedTimestamp: bigint;
  requestBody: RequestBody;
  responseBody: ResponseBody;
}

interface Proof {
  merkleProof: string[];
  data: Response;
}

// Function signature for submitProof
const submitProofABI = [
  "function submitProof((bytes32[] merkleProof, (bytes32 attestationType, bytes32 sourceId, uint64 votingRound, uint64 lowestUsedTimestamp, (string url, string httpMethod, string headers, string queryParams, string body, string postProcessJq, string abiSignature) requestBody, (bytes abiEncodedData) responseBody) data) proof)"
];

// The raw transaction data
const txData = "0x43b8e8210000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000004b8a417ea9f7138d71f4e3c5e0c1242e0dfa7501fda58e3f3582d152fed2b096afebecfc5a96ac84978e4a49435c3004ab6caaec74e52584acb274da8ef1ddf271636310a630bde51ab08a7897a0ad62745e69e1918e8679ef8e1fd0987bcb408af983e23b328e2945f6bd556b78beb4ad877ecc6a71fa98492ecb1793bf64648576562324a736f6e0000000000000000000000000000000000000000000000005075626c6963576562320000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fd291000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000005a000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000024000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000360000000000000000000000000000000000000000000000000000000000000002768747470733a2f2f776973652e636f6d2f6170692f76332f7061796d656e742f64657461696c73000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003474554000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000407b22417574686f72697a6174696f6e223a20224265617265722037386164646237612d373938382d346261622d626365322d323633333464363833386435227d000000000000000000000000000000000000000000000000000000000000002e7b227061796d656e744964223a313631353136303730362c202273696d706c6966696564526573756c74223a307d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ca7b7061796d656e745374617475733a202e7061796d656e745374617475732c20726563697069656e7449643a20282e726563697069656e742e6964207c20746f6e756d626572292c20726563697069656e744163636f756e743a20282e726563697069656e742e6163636f756e74207c2073706c697428222822295b315d207c2073706c697428222922295b305d207c20746f6e756d626572292c207061796d656e745265666572656e63653a202822307822202b202e7061796d656e745265666572656e636529207d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014e7b22636f6d706f6e656e7473223a205b7b22696e7465726e616c54797065223a2022737472696e67222c20226e616d65223a20227061796d656e74537461747573222c202274797065223a2022737472696e67227d2c7b22696e7465726e616c54797065223a202275696e74323536222c20226e616d65223a2022726563697069656e744964222c202274797065223a202275696e74323536227d2c7b22696e7465726e616c54797065223a202275696e74323536222c20226e616d65223a2022726563697069656e744163636f756e74222c202274797065223a202275696e74323536227d2c7b22696e7465726e616c54797065223a20226279746573222c20226e616d65223a20227061796d656e745265666572656e6365222c202274797065223a20226279746573227d5d2c226e616d65223a20227461736b222c2274797065223a20227475706c65227d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000003fcc77ed000000000000000000000000000000000000000000000000000000000451f3fe00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000b7472616e73666572726564000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002ebc10ea9f1d53c273d7fd25d39394b8b2eb761d2a0000766c5553445430000000000000000000000000000000000a000000000000000000000000000000000000";

async function decodeSubmitProof() {
  try {
    // Create interface
    const iface = new ethers.Interface(submitProofABI);
    
    // Decode the function call
    const decoded = iface.parseTransaction({ data: txData });
    
    console.log("=== DECODED SUBMITPROOF FUNCTION CALL ===\n");
    console.log("Function name:", decoded?.name);
    console.log("Function signature:", decoded?.signature);
    
    if (decoded?.args && decoded.args.length > 0) {
      const proof = decoded.args[0] as any;
      
      console.log("\n=== PROOF STRUCTURE ===");
      console.log("Merkle Proof Array Length:", proof.merkleProof.length);
      console.log("Merkle Proof Values:");
      proof.merkleProof.forEach((hash: string, index: number) => {
        console.log(`  [${index}]:`, hash);
      });
      
      console.log("\n=== RESPONSE DATA ===");
      const responseData = proof.data;
      console.log("Attestation Type:", responseData.attestationType);
      console.log("Source ID:", responseData.sourceId);
      console.log("Voting Round:", responseData.votingRound.toString());
      console.log("Lowest Used Timestamp:", responseData.lowestUsedTimestamp.toString());
      
      console.log("\n=== REQUEST BODY ===");
      const requestBody = responseData.requestBody;
      console.log("URL:", requestBody.url);
      console.log("HTTP Method:", requestBody.httpMethod);
      console.log("Headers:", requestBody.headers);
      console.log("Query Params:", requestBody.queryParams);
      console.log("Body:", requestBody.body);
      console.log("Post Process JQ:", requestBody.postProcessJq);
      console.log("ABI Signature:", requestBody.abiSignature);
      
      console.log("\n=== RESPONSE BODY ===");
      const responseBody = responseData.responseBody;
      console.log("ABI Encoded Data (hex):", responseBody.abiEncodedData);
      
      // Now decode the inner ABI encoded data
      console.log("\n=== DECODED INNER ABI DATA ===");
      try {
        // Based on the function signature, it expects (string, uint256, uint256, string)
        const innerDecoded = ethers.AbiCoder.defaultAbiCoder().decode(
          ["(string,uint256,uint256,bytes)"],
          responseBody.abiEncodedData
        ).toArray()[0].toArray();
        
        console.log("Payment Status:", innerDecoded[0]);
        console.log("Recipient ID:", innerDecoded[1]);
        console.log("Recipient Account:", innerDecoded[2]);
        console.log("Payment Reference:", innerDecoded[3]);
        
      } catch (innerError) {
        console.error("Error decoding inner ABI data:", innerError);
      }
    }
    
  } catch (error) {
    console.error("Error decoding transaction:", error);
  }
}

// Execute the decoding
decodeSubmitProof();